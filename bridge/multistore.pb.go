// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: luqchain/bridge/multistore.proto

package bridge

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// _______________________[AppHash]______________
// /                                              \
// _________________[I19]_________________                         ____[I20*]____
// /                                       \	                      /              \
// _______[I15*]______                       _______[I16]_________        [GHIJ]           [KLMN]
// /                   \                     /                     \
// __[I8]__              __[I9]__            __[I10*]__             __[I11]__
// /        \            /         \         /          \           /         \
// [I0]      [I1]       [I2]        [I3]     [I4]         [I5]      [I6*]       [I7]
// /  \     /   \      /   \      /    \    /    \        /  \      /   \      /   \
// [0] [1]  [2]   [3]  [4]  [5]  [6]    [7] [8]   [9]     [A] [B]   [C]  [D]  [E*]  [F*]
// Right[F], Left[I6], Left[I10], Left[I15], Right[I20]
// [0] - acc (auth)     [1] - authz     [2] - bank      [3] - capability [4] - consensus [5] - crisis
// [6] - distr          [7] - evidence  [8] - feegrant  [9] - gov        [A] - group     [B] - ibc
// [C] - icacontroller  [D] - icahost   [E] - luqchain  [F] - mint       [G] - params    [H] - slashing
// [I] - staking        [J] - transfer  [K] - upgrade   [L] - vesting
type MutiStoreTreeFields struct {
	LuqchainIavlStateHash            string `protobuf:"bytes,1,opt,name=luqchain_iavl_state_hash,json=luqchainIavlStateHash,proto3" json:"luqchain_iavl_state_hash,omitempty"`
	MintStoreMerkleHash              string `protobuf:"bytes,2,opt,name=mint_store_merkle_hash,json=mintStoreMerkleHash,proto3" json:"mint_store_merkle_hash,omitempty"`
	IcacontrollerToIcahostMerkleHash string `protobuf:"bytes,3,opt,name=icacontroller_to_icahost_merkle_hash,json=icacontrollerToIcahostMerkleHash,proto3" json:"icacontroller_to_icahost_merkle_hash,omitempty"`
	FeegrantToIbcMerkleHash          string `protobuf:"bytes,4,opt,name=feegrant_to_ibc_merkle_hash,json=feegrantToIbcMerkleHash,proto3" json:"feegrant_to_ibc_merkle_hash,omitempty"`
	AccToEvidenceMerkleHash          string `protobuf:"bytes,5,opt,name=acc_to_evidence_merkle_hash,json=accToEvidenceMerkleHash,proto3" json:"acc_to_evidence_merkle_hash,omitempty"`
	ParamsToVestingMerkleHash        string `protobuf:"bytes,6,opt,name=params_to_vesting_merkle_hash,json=paramsToVestingMerkleHash,proto3" json:"params_to_vesting_merkle_hash,omitempty"`
}

func (m *MutiStoreTreeFields) Reset()         { *m = MutiStoreTreeFields{} }
func (m *MutiStoreTreeFields) String() string { return proto.CompactTextString(m) }
func (*MutiStoreTreeFields) ProtoMessage()    {}
func (*MutiStoreTreeFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_f573ebd55744e127, []int{0}
}
func (m *MutiStoreTreeFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutiStoreTreeFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutiStoreTreeFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutiStoreTreeFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutiStoreTreeFields.Merge(m, src)
}
func (m *MutiStoreTreeFields) XXX_Size() int {
	return m.Size()
}
func (m *MutiStoreTreeFields) XXX_DiscardUnknown() {
	xxx_messageInfo_MutiStoreTreeFields.DiscardUnknown(m)
}

var xxx_messageInfo_MutiStoreTreeFields proto.InternalMessageInfo

func (m *MutiStoreTreeFields) GetLuqchainIavlStateHash() string {
	if m != nil {
		return m.LuqchainIavlStateHash
	}
	return ""
}

func (m *MutiStoreTreeFields) GetMintStoreMerkleHash() string {
	if m != nil {
		return m.MintStoreMerkleHash
	}
	return ""
}

func (m *MutiStoreTreeFields) GetIcacontrollerToIcahostMerkleHash() string {
	if m != nil {
		return m.IcacontrollerToIcahostMerkleHash
	}
	return ""
}

func (m *MutiStoreTreeFields) GetFeegrantToIbcMerkleHash() string {
	if m != nil {
		return m.FeegrantToIbcMerkleHash
	}
	return ""
}

func (m *MutiStoreTreeFields) GetAccToEvidenceMerkleHash() string {
	if m != nil {
		return m.AccToEvidenceMerkleHash
	}
	return ""
}

func (m *MutiStoreTreeFields) GetParamsToVestingMerkleHash() string {
	if m != nil {
		return m.ParamsToVestingMerkleHash
	}
	return ""
}

type IAVLMerklePathEvm struct {
	IsDataOnRight  bool   `protobuf:"varint,1,opt,name=IsDataOnRight,proto3" json:"IsDataOnRight,omitempty"`
	SubtreeHeight  uint32 `protobuf:"varint,2,opt,name=SubtreeHeight,proto3" json:"SubtreeHeight,omitempty"`
	SubtreeSize    int64  `protobuf:"varint,3,opt,name=SubtreeSize,proto3" json:"SubtreeSize,omitempty"`
	SubtreeVersion int64  `protobuf:"varint,4,opt,name=SubtreeVersion,proto3" json:"SubtreeVersion,omitempty"`
	SiblingHash    string `protobuf:"bytes,5,opt,name=SiblingHash,proto3" json:"SiblingHash,omitempty"`
}

func (m *IAVLMerklePathEvm) Reset()         { *m = IAVLMerklePathEvm{} }
func (m *IAVLMerklePathEvm) String() string { return proto.CompactTextString(m) }
func (*IAVLMerklePathEvm) ProtoMessage()    {}
func (*IAVLMerklePathEvm) Descriptor() ([]byte, []int) {
	return fileDescriptor_f573ebd55744e127, []int{1}
}
func (m *IAVLMerklePathEvm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IAVLMerklePathEvm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IAVLMerklePathEvm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IAVLMerklePathEvm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IAVLMerklePathEvm.Merge(m, src)
}
func (m *IAVLMerklePathEvm) XXX_Size() int {
	return m.Size()
}
func (m *IAVLMerklePathEvm) XXX_DiscardUnknown() {
	xxx_messageInfo_IAVLMerklePathEvm.DiscardUnknown(m)
}

var xxx_messageInfo_IAVLMerklePathEvm proto.InternalMessageInfo

func (m *IAVLMerklePathEvm) GetIsDataOnRight() bool {
	if m != nil {
		return m.IsDataOnRight
	}
	return false
}

func (m *IAVLMerklePathEvm) GetSubtreeHeight() uint32 {
	if m != nil {
		return m.SubtreeHeight
	}
	return 0
}

func (m *IAVLMerklePathEvm) GetSubtreeSize() int64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *IAVLMerklePathEvm) GetSubtreeVersion() int64 {
	if m != nil {
		return m.SubtreeVersion
	}
	return 0
}

func (m *IAVLMerklePathEvm) GetSiblingHash() string {
	if m != nil {
		return m.SiblingHash
	}
	return ""
}

type IAVLMerklePath struct {
	IsDataOnRight  bool   `protobuf:"varint,1,opt,name=is_data_on_right,json=isDataOnRight,proto3" json:"is_data_on_right,omitempty"`
	SubtreeHeight  uint32 `protobuf:"varint,2,opt,name=subtree_height,json=subtreeHeight,proto3" json:"subtree_height,omitempty"`
	SubtreeSize    uint64 `protobuf:"varint,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	SubtreeVersion uint64 `protobuf:"varint,4,opt,name=subtree_version,json=subtreeVersion,proto3" json:"subtree_version,omitempty"`
	SiblingHash    []byte `protobuf:"bytes,5,opt,name=sibling_hash,json=siblingHash,proto3" json:"sibling_hash,omitempty"`
}

func (m *IAVLMerklePath) Reset()         { *m = IAVLMerklePath{} }
func (m *IAVLMerklePath) String() string { return proto.CompactTextString(m) }
func (*IAVLMerklePath) ProtoMessage()    {}
func (*IAVLMerklePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_f573ebd55744e127, []int{2}
}
func (m *IAVLMerklePath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IAVLMerklePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IAVLMerklePath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IAVLMerklePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IAVLMerklePath.Merge(m, src)
}
func (m *IAVLMerklePath) XXX_Size() int {
	return m.Size()
}
func (m *IAVLMerklePath) XXX_DiscardUnknown() {
	xxx_messageInfo_IAVLMerklePath.DiscardUnknown(m)
}

var xxx_messageInfo_IAVLMerklePath proto.InternalMessageInfo

func (m *IAVLMerklePath) GetIsDataOnRight() bool {
	if m != nil {
		return m.IsDataOnRight
	}
	return false
}

func (m *IAVLMerklePath) GetSubtreeHeight() uint32 {
	if m != nil {
		return m.SubtreeHeight
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeSize() uint64 {
	if m != nil {
		return m.SubtreeSize
	}
	return 0
}

func (m *IAVLMerklePath) GetSubtreeVersion() uint64 {
	if m != nil {
		return m.SubtreeVersion
	}
	return 0
}

func (m *IAVLMerklePath) GetSiblingHash() []byte {
	if m != nil {
		return m.SiblingHash
	}
	return nil
}

func init() {
	proto.RegisterType((*MutiStoreTreeFields)(nil), "luqchain.bridge.MutiStoreTreeFields")
	proto.RegisterType((*IAVLMerklePathEvm)(nil), "luqchain.bridge.IAVLMerklePathEvm")
	proto.RegisterType((*IAVLMerklePath)(nil), "luqchain.bridge.IAVLMerklePath")
}

func init() { proto.RegisterFile("luqchain/bridge/multistore.proto", fileDescriptor_f573ebd55744e127) }

var fileDescriptor_f573ebd55744e127 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x1b, 0x5a, 0x26, 0x70, 0xb7, 0x16, 0x32, 0x01, 0x43, 0x88, 0xa8, 0x54, 0x83, 0xc1,
	0x65, 0x3b, 0xec, 0xc0, 0x85, 0x03, 0x20, 0x86, 0x5a, 0x89, 0x01, 0x4a, 0xa3, 0x1e, 0xb8, 0x58,
	0x8e, 0xfb, 0x48, 0x9e, 0x48, 0xec, 0x61, 0xbb, 0x39, 0xf0, 0x57, 0xc0, 0x7f, 0x85, 0xc4, 0x81,
	0x1d, 0x39, 0xa2, 0xf6, 0x1f, 0x99, 0xe2, 0xd4, 0x6a, 0xbc, 0x63, 0xbf, 0xf7, 0xfb, 0xbe, 0xd7,
	0xef, 0x45, 0x26, 0xa3, 0x62, 0xf9, 0x9d, 0xe7, 0x0c, 0xc5, 0x49, 0xaa, 0x70, 0x91, 0xc1, 0x49,
	0xb9, 0x2c, 0x0c, 0x6a, 0x23, 0x15, 0x1c, 0x5f, 0x28, 0x69, 0x64, 0x38, 0x74, 0xc4, 0x71, 0x43,
	0x8c, 0x7f, 0x75, 0xc9, 0xfe, 0xf9, 0xd2, 0xe0, 0xac, 0x86, 0x12, 0x05, 0xf0, 0x1e, 0xa1, 0x58,
	0xe8, 0xf0, 0x25, 0x39, 0x70, 0x28, 0x45, 0x56, 0x15, 0x54, 0x1b, 0x66, 0x80, 0xe6, 0x4c, 0xe7,
	0x07, 0xc1, 0x28, 0x78, 0x7e, 0x3b, 0xbe, 0xe7, 0xe6, 0x53, 0x56, 0x15, 0xb3, 0x7a, 0x3a, 0x61,
	0x3a, 0x0f, 0x4f, 0xc9, 0xfd, 0x12, 0x85, 0xa1, 0x76, 0x2b, 0x2d, 0x41, 0x7d, 0x2b, 0x36, 0xb6,
	0x1b, 0xd6, 0xb6, 0x5f, 0x4f, 0xed, 0xb6, 0x73, 0x3b, 0xb3, 0xa6, 0x8f, 0xe4, 0x10, 0x39, 0xe3,
	0x52, 0x18, 0x25, 0x8b, 0x02, 0x14, 0x35, 0x92, 0x22, 0x67, 0xb9, 0xd4, 0xc6, 0x8b, 0xe8, 0xda,
	0x88, 0x91, 0xc7, 0x26, 0x72, 0xda, 0x90, 0xad, 0xbc, 0x57, 0xe4, 0xd1, 0x57, 0x80, 0x4c, 0x31,
	0x61, 0x6c, 0x54, 0xca, 0xbd, 0x98, 0x9e, 0x8d, 0x79, 0xe0, 0x90, 0x44, 0x4e, 0x53, 0xee, 0xbb,
	0x19, 0xe7, 0xb5, 0x11, 0x2a, 0x5c, 0x80, 0xe0, 0x7e, 0x8f, 0x9b, 0x8d, 0x9b, 0x71, 0x9e, 0xc8,
	0xb3, 0x0d, 0xd0, 0x72, 0xbf, 0x26, 0x8f, 0x2f, 0x98, 0x62, 0xa5, 0xae, 0x03, 0x2a, 0xd0, 0x06,
	0x45, 0xe6, 0xf9, 0x77, 0xac, 0xff, 0x61, 0x03, 0x25, 0x72, 0xde, 0x20, 0xdb, 0x84, 0xf1, 0x9f,
	0x80, 0xdc, 0x9d, 0xbe, 0x99, 0x7f, 0x68, 0xa4, 0xcf, 0xcc, 0xe4, 0x67, 0x55, 0x19, 0x1e, 0x92,
	0xbd, 0xa9, 0x7e, 0xc7, 0x0c, 0xfb, 0x24, 0x62, 0xcc, 0x72, 0x63, 0x3f, 0xc3, 0xad, 0xd8, 0x17,
	0x6b, 0x6a, 0xb6, 0x4c, 0x8d, 0x02, 0x98, 0x80, 0xa5, 0xea, 0xab, 0xef, 0xc5, 0xbe, 0x18, 0x8e,
	0x48, 0x7f, 0x23, 0xcc, 0xf0, 0x07, 0xd8, 0xb3, 0x76, 0xe3, 0xb6, 0x14, 0x3e, 0x23, 0x83, 0xcd,
	0xcf, 0x39, 0x28, 0x8d, 0x52, 0xd8, 0xa3, 0x75, 0xe3, 0x6b, 0xaa, 0x4d, 0xc2, 0xb4, 0x40, 0x91,
	0x4d, 0xb6, 0xb7, 0x69, 0x4b, 0xe3, 0xbf, 0x01, 0x19, 0xf8, 0x6d, 0xc2, 0x23, 0x72, 0x07, 0x35,
	0x5d, 0x30, 0xc3, 0xa8, 0x14, 0x54, 0xb5, 0xdb, 0xa0, 0xd7, 0xe6, 0x29, 0x19, 0xe8, 0x66, 0x1f,
	0xcd, 0xbd, 0x3a, 0xda, 0xab, 0xf3, 0x84, 0xec, 0x3a, 0x4c, 0xbb, 0x3e, 0xbd, 0xb8, 0xaf, 0x5b,
	0x7d, 0x8e, 0xc8, 0xd0, 0x21, 0x55, 0xab, 0x50, 0x2f, 0x76, 0x0b, 0x5c, 0xa1, 0x3a, 0xab, 0xf9,
	0xf7, 0xdb, 0xaf, 0xbd, 0x1b, 0xf7, 0xf5, 0xb6, 0xd1, 0xdb, 0x17, 0xbf, 0x57, 0x51, 0x70, 0xb9,
	0x8a, 0x82, 0xff, 0xab, 0x28, 0xf8, 0xb9, 0x8e, 0x3a, 0x97, 0xeb, 0xa8, 0xf3, 0x6f, 0x1d, 0x75,
	0xbe, 0x0c, 0xaf, 0x3d, 0xc0, 0x74, 0xc7, 0x3e, 0xbb, 0xd3, 0xab, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x76, 0x8d, 0x3a, 0x05, 0x9a, 0x03, 0x00, 0x00,
}

func (m *MutiStoreTreeFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutiStoreTreeFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutiStoreTreeFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamsToVestingMerkleHash) > 0 {
		i -= len(m.ParamsToVestingMerkleHash)
		copy(dAtA[i:], m.ParamsToVestingMerkleHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.ParamsToVestingMerkleHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccToEvidenceMerkleHash) > 0 {
		i -= len(m.AccToEvidenceMerkleHash)
		copy(dAtA[i:], m.AccToEvidenceMerkleHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.AccToEvidenceMerkleHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeegrantToIbcMerkleHash) > 0 {
		i -= len(m.FeegrantToIbcMerkleHash)
		copy(dAtA[i:], m.FeegrantToIbcMerkleHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.FeegrantToIbcMerkleHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IcacontrollerToIcahostMerkleHash) > 0 {
		i -= len(m.IcacontrollerToIcahostMerkleHash)
		copy(dAtA[i:], m.IcacontrollerToIcahostMerkleHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.IcacontrollerToIcahostMerkleHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MintStoreMerkleHash) > 0 {
		i -= len(m.MintStoreMerkleHash)
		copy(dAtA[i:], m.MintStoreMerkleHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.MintStoreMerkleHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LuqchainIavlStateHash) > 0 {
		i -= len(m.LuqchainIavlStateHash)
		copy(dAtA[i:], m.LuqchainIavlStateHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.LuqchainIavlStateHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IAVLMerklePathEvm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IAVLMerklePathEvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IAVLMerklePathEvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiblingHash) > 0 {
		i -= len(m.SiblingHash)
		copy(dAtA[i:], m.SiblingHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.SiblingHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubtreeVersion != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.SubtreeSize != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeSize))
		i--
		dAtA[i] = 0x18
	}
	if m.SubtreeHeight != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDataOnRight {
		i--
		if m.IsDataOnRight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IAVLMerklePath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IAVLMerklePath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IAVLMerklePath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SiblingHash) > 0 {
		i -= len(m.SiblingHash)
		copy(dAtA[i:], m.SiblingHash)
		i = encodeVarintMultistore(dAtA, i, uint64(len(m.SiblingHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SubtreeVersion != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.SubtreeSize != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeSize))
		i--
		dAtA[i] = 0x18
	}
	if m.SubtreeHeight != 0 {
		i = encodeVarintMultistore(dAtA, i, uint64(m.SubtreeHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDataOnRight {
		i--
		if m.IsDataOnRight {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultistore(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultistore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MutiStoreTreeFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LuqchainIavlStateHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	l = len(m.MintStoreMerkleHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	l = len(m.IcacontrollerToIcahostMerkleHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	l = len(m.FeegrantToIbcMerkleHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	l = len(m.AccToEvidenceMerkleHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	l = len(m.ParamsToVestingMerkleHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	return n
}

func (m *IAVLMerklePathEvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDataOnRight {
		n += 2
	}
	if m.SubtreeHeight != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeHeight))
	}
	if m.SubtreeSize != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeSize))
	}
	if m.SubtreeVersion != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeVersion))
	}
	l = len(m.SiblingHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	return n
}

func (m *IAVLMerklePath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDataOnRight {
		n += 2
	}
	if m.SubtreeHeight != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeHeight))
	}
	if m.SubtreeSize != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeSize))
	}
	if m.SubtreeVersion != 0 {
		n += 1 + sovMultistore(uint64(m.SubtreeVersion))
	}
	l = len(m.SiblingHash)
	if l > 0 {
		n += 1 + l + sovMultistore(uint64(l))
	}
	return n
}

func sovMultistore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultistore(x uint64) (n int) {
	return sovMultistore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MutiStoreTreeFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultistore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutiStoreTreeFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutiStoreTreeFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuqchainIavlStateHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LuqchainIavlStateHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintStoreMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintStoreMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcacontrollerToIcahostMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IcacontrollerToIcahostMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeegrantToIbcMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeegrantToIbcMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccToEvidenceMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccToEvidenceMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsToVestingMerkleHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamsToVestingMerkleHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultistore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultistore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IAVLMerklePathEvm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultistore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IAVLMerklePathEvm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IAVLMerklePathEvm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDataOnRight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDataOnRight = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeHeight", wireType)
			}
			m.SubtreeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			m.SubtreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeVersion", wireType)
			}
			m.SubtreeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiblingHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiblingHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultistore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultistore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IAVLMerklePath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultistore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IAVLMerklePath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IAVLMerklePath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDataOnRight", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDataOnRight = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeHeight", wireType)
			}
			m.SubtreeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			m.SubtreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeVersion", wireType)
			}
			m.SubtreeVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubtreeVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SiblingHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultistore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultistore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SiblingHash = append(m.SiblingHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SiblingHash == nil {
				m.SiblingHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultistore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultistore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultistore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultistore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultistore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultistore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultistore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultistore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultistore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultistore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultistore = fmt.Errorf("proto: unexpected end of group")
)
