// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: luqchain/bridge/block_header_merkle.proto

package bridge

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockHeaderMerkle struct {
	VersionChainidHash         []byte `protobuf:"bytes,1,opt,name=versionChainidHash,proto3" json:"versionChainidHash,omitempty"`
	Height                     uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                 uint64 `protobuf:"varint,3,opt,name=timeSecond,proto3" json:"timeSecond,omitempty"`
	TimeNanosecond             uint32 `protobuf:"varint,4,opt,name=timeNanosecond,proto3" json:"timeNanosecond,omitempty"`
	LastblockidCommitHash      []byte `protobuf:"bytes,5,opt,name=lastblockidCommitHash,proto3" json:"lastblockidCommitHash,omitempty"`
	NextvalidatorConsensusHash []byte `protobuf:"bytes,6,opt,name=nextvalidatorConsensusHash,proto3" json:"nextvalidatorConsensusHash,omitempty"`
	LastresultsHash            []byte `protobuf:"bytes,7,opt,name=lastresultsHash,proto3" json:"lastresultsHash,omitempty"`
	EvidenceProposerHash       []byte `protobuf:"bytes,8,opt,name=evidenceProposerHash,proto3" json:"evidenceProposerHash,omitempty"`
}

func (m *BlockHeaderMerkle) Reset()         { *m = BlockHeaderMerkle{} }
func (m *BlockHeaderMerkle) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderMerkle) ProtoMessage()    {}
func (*BlockHeaderMerkle) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dc77006c6e86e7, []int{0}
}
func (m *BlockHeaderMerkle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderMerkle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderMerkle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderMerkle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderMerkle.Merge(m, src)
}
func (m *BlockHeaderMerkle) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderMerkle) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderMerkle.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderMerkle proto.InternalMessageInfo

func (m *BlockHeaderMerkle) GetVersionChainidHash() []byte {
	if m != nil {
		return m.VersionChainidHash
	}
	return nil
}

func (m *BlockHeaderMerkle) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderMerkle) GetTimeSecond() uint64 {
	if m != nil {
		return m.TimeSecond
	}
	return 0
}

func (m *BlockHeaderMerkle) GetTimeNanosecond() uint32 {
	if m != nil {
		return m.TimeNanosecond
	}
	return 0
}

func (m *BlockHeaderMerkle) GetLastblockidCommitHash() []byte {
	if m != nil {
		return m.LastblockidCommitHash
	}
	return nil
}

func (m *BlockHeaderMerkle) GetNextvalidatorConsensusHash() []byte {
	if m != nil {
		return m.NextvalidatorConsensusHash
	}
	return nil
}

func (m *BlockHeaderMerkle) GetLastresultsHash() []byte {
	if m != nil {
		return m.LastresultsHash
	}
	return nil
}

func (m *BlockHeaderMerkle) GetEvidenceProposerHash() []byte {
	if m != nil {
		return m.EvidenceProposerHash
	}
	return nil
}

type BlockHeaderMerkleEvm struct {
	VersionChainidHash         string `protobuf:"bytes,1,opt,name=versionChainidHash,proto3" json:"versionChainidHash,omitempty"`
	Height                     uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TimeSecond                 uint64 `protobuf:"varint,3,opt,name=timeSecond,proto3" json:"timeSecond,omitempty"`
	TimeNanosecond             uint32 `protobuf:"varint,4,opt,name=timeNanosecond,proto3" json:"timeNanosecond,omitempty"`
	LastblockidCommitHash      string `protobuf:"bytes,5,opt,name=lastblockidCommitHash,proto3" json:"lastblockidCommitHash,omitempty"`
	NextvalidatorConsensusHash string `protobuf:"bytes,6,opt,name=nextvalidatorConsensusHash,proto3" json:"nextvalidatorConsensusHash,omitempty"`
	LastresultsHash            string `protobuf:"bytes,7,opt,name=lastresultsHash,proto3" json:"lastresultsHash,omitempty"`
	EvidenceProposerHash       string `protobuf:"bytes,8,opt,name=evidenceProposerHash,proto3" json:"evidenceProposerHash,omitempty"`
}

func (m *BlockHeaderMerkleEvm) Reset()         { *m = BlockHeaderMerkleEvm{} }
func (m *BlockHeaderMerkleEvm) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderMerkleEvm) ProtoMessage()    {}
func (*BlockHeaderMerkleEvm) Descriptor() ([]byte, []int) {
	return fileDescriptor_90dc77006c6e86e7, []int{1}
}
func (m *BlockHeaderMerkleEvm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderMerkleEvm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderMerkleEvm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderMerkleEvm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderMerkleEvm.Merge(m, src)
}
func (m *BlockHeaderMerkleEvm) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderMerkleEvm) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderMerkleEvm.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderMerkleEvm proto.InternalMessageInfo

func (m *BlockHeaderMerkleEvm) GetVersionChainidHash() string {
	if m != nil {
		return m.VersionChainidHash
	}
	return ""
}

func (m *BlockHeaderMerkleEvm) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeaderMerkleEvm) GetTimeSecond() uint64 {
	if m != nil {
		return m.TimeSecond
	}
	return 0
}

func (m *BlockHeaderMerkleEvm) GetTimeNanosecond() uint32 {
	if m != nil {
		return m.TimeNanosecond
	}
	return 0
}

func (m *BlockHeaderMerkleEvm) GetLastblockidCommitHash() string {
	if m != nil {
		return m.LastblockidCommitHash
	}
	return ""
}

func (m *BlockHeaderMerkleEvm) GetNextvalidatorConsensusHash() string {
	if m != nil {
		return m.NextvalidatorConsensusHash
	}
	return ""
}

func (m *BlockHeaderMerkleEvm) GetLastresultsHash() string {
	if m != nil {
		return m.LastresultsHash
	}
	return ""
}

func (m *BlockHeaderMerkleEvm) GetEvidenceProposerHash() string {
	if m != nil {
		return m.EvidenceProposerHash
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockHeaderMerkle)(nil), "luqchain.bridge.BlockHeaderMerkle")
	proto.RegisterType((*BlockHeaderMerkleEvm)(nil), "luqchain.bridge.BlockHeaderMerkleEvm")
}

func init() {
	proto.RegisterFile("luqchain/bridge/block_header_merkle.proto", fileDescriptor_90dc77006c6e86e7)
}

var fileDescriptor_90dc77006c6e86e7 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0x31, 0x4b, 0x33, 0x31,
	0x18, 0xc7, 0x9b, 0xbe, 0x7d, 0xab, 0x17, 0xd4, 0x62, 0xa8, 0x52, 0x1c, 0x42, 0xe9, 0x20, 0xd7,
	0xa5, 0x05, 0x75, 0x76, 0x68, 0x11, 0xba, 0x28, 0x52, 0x37, 0x97, 0x92, 0x5e, 0x1e, 0x7a, 0xa1,
	0xb9, 0xa4, 0x26, 0xe9, 0xe1, 0xc7, 0xf0, 0x63, 0x39, 0x76, 0x74, 0x94, 0xf6, 0x43, 0x08, 0x4e,
	0x72, 0xa9, 0x82, 0x9c, 0x47, 0xc1, 0x4e, 0x8e, 0x79, 0xfe, 0xbf, 0xff, 0xf1, 0xdc, 0x0f, 0x1e,
	0xdc, 0x96, 0xf3, 0x87, 0x28, 0x66, 0x42, 0x75, 0xc7, 0x46, 0xf0, 0x09, 0x74, 0xc7, 0x52, 0x47,
	0xd3, 0x51, 0x0c, 0x8c, 0x83, 0x19, 0x25, 0x60, 0xa6, 0x12, 0x3a, 0x33, 0xa3, 0x9d, 0x26, 0xb5,
	0x2f, 0xb4, 0xb3, 0x46, 0x5b, 0x6f, 0x65, 0x7c, 0xd8, 0xcb, 0xf0, 0x81, 0xa7, 0xaf, 0x3d, 0x4c,
	0x3a, 0x98, 0xa4, 0x60, 0xac, 0xd0, 0xaa, 0x9f, 0xc1, 0x82, 0x0f, 0x98, 0x8d, 0x1b, 0xa8, 0x89,
	0xc2, 0xbd, 0x61, 0x41, 0x42, 0x8e, 0x71, 0x35, 0x06, 0x31, 0x89, 0x5d, 0xa3, 0xdc, 0x44, 0x61,
	0x65, 0xf8, 0xf9, 0x22, 0x14, 0x63, 0x27, 0x12, 0xb8, 0x83, 0x48, 0x2b, 0xde, 0xf8, 0xe7, 0xb3,
	0x6f, 0x13, 0x72, 0x8a, 0x0f, 0xb2, 0xd7, 0x0d, 0x53, 0xda, 0xae, 0x99, 0x4a, 0x13, 0x85, 0xfb,
	0xc3, 0xdc, 0x94, 0x5c, 0xe0, 0x23, 0xc9, 0xac, 0xf3, 0xff, 0x25, 0x78, 0x5f, 0x27, 0x89, 0x70,
	0x7e, 0xa5, 0xff, 0x7e, 0xa5, 0xe2, 0x90, 0x5c, 0xe2, 0x13, 0x05, 0x8f, 0x2e, 0x65, 0x52, 0x70,
	0xe6, 0xb4, 0xe9, 0x6b, 0x65, 0x41, 0xd9, 0xb9, 0xf5, 0xd5, 0xaa, 0xaf, 0x6e, 0x20, 0x48, 0x88,
	0x6b, 0xd9, 0x87, 0x0d, 0xd8, 0xb9, 0x74, 0xeb, 0xd2, 0x8e, 0x2f, 0xe5, 0xc7, 0xe4, 0x0c, 0xd7,
	0x21, 0x15, 0x1c, 0x54, 0x04, 0xb7, 0x46, 0xcf, 0xb4, 0x05, 0xe3, 0xf1, 0x5d, 0x8f, 0x17, 0x66,
	0xad, 0xf7, 0x32, 0xae, 0xff, 0x30, 0x7f, 0x95, 0x26, 0x1b, 0xe4, 0x07, 0x7f, 0x4f, 0x7e, 0xb0,
	0xbd, 0xfc, 0x60, 0x1b, 0xf9, 0xc1, 0xef, 0xe4, 0x07, 0xc5, 0xf2, 0x7b, 0xed, 0xe7, 0x25, 0x45,
	0x8b, 0x25, 0x45, 0xaf, 0x4b, 0x8a, 0x9e, 0x56, 0xb4, 0xb4, 0x58, 0xd1, 0xd2, 0xcb, 0x8a, 0x96,
	0xee, 0x6b, 0xb9, 0x63, 0x1a, 0x57, 0xfd, 0xe5, 0x9c, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xba,
	0x2e, 0x00, 0xf8, 0x66, 0x03, 0x00, 0x00,
}

func (m *BlockHeaderMerkle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderMerkle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderMerkle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceProposerHash) > 0 {
		i -= len(m.EvidenceProposerHash)
		copy(dAtA[i:], m.EvidenceProposerHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.EvidenceProposerHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastresultsHash) > 0 {
		i -= len(m.LastresultsHash)
		copy(dAtA[i:], m.LastresultsHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.LastresultsHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NextvalidatorConsensusHash) > 0 {
		i -= len(m.NextvalidatorConsensusHash)
		copy(dAtA[i:], m.NextvalidatorConsensusHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.NextvalidatorConsensusHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastblockidCommitHash) > 0 {
		i -= len(m.LastblockidCommitHash)
		copy(dAtA[i:], m.LastblockidCommitHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.LastblockidCommitHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeNanosecond != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.TimeNanosecond))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeSecond != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.TimeSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionChainidHash) > 0 {
		i -= len(m.VersionChainidHash)
		copy(dAtA[i:], m.VersionChainidHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.VersionChainidHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeaderMerkleEvm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderMerkleEvm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderMerkleEvm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvidenceProposerHash) > 0 {
		i -= len(m.EvidenceProposerHash)
		copy(dAtA[i:], m.EvidenceProposerHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.EvidenceProposerHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastresultsHash) > 0 {
		i -= len(m.LastresultsHash)
		copy(dAtA[i:], m.LastresultsHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.LastresultsHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NextvalidatorConsensusHash) > 0 {
		i -= len(m.NextvalidatorConsensusHash)
		copy(dAtA[i:], m.NextvalidatorConsensusHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.NextvalidatorConsensusHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastblockidCommitHash) > 0 {
		i -= len(m.LastblockidCommitHash)
		copy(dAtA[i:], m.LastblockidCommitHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.LastblockidCommitHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeNanosecond != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.TimeNanosecond))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeSecond != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.TimeSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.VersionChainidHash) > 0 {
		i -= len(m.VersionChainidHash)
		copy(dAtA[i:], m.VersionChainidHash)
		i = encodeVarintBlockHeaderMerkle(dAtA, i, uint64(len(m.VersionChainidHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockHeaderMerkle(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockHeaderMerkle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeaderMerkle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionChainidHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.Height))
	}
	if m.TimeSecond != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.TimeSecond))
	}
	if m.TimeNanosecond != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.TimeNanosecond))
	}
	l = len(m.LastblockidCommitHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.NextvalidatorConsensusHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.LastresultsHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.EvidenceProposerHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	return n
}

func (m *BlockHeaderMerkleEvm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionChainidHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.Height))
	}
	if m.TimeSecond != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.TimeSecond))
	}
	if m.TimeNanosecond != 0 {
		n += 1 + sovBlockHeaderMerkle(uint64(m.TimeNanosecond))
	}
	l = len(m.LastblockidCommitHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.NextvalidatorConsensusHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.LastresultsHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	l = len(m.EvidenceProposerHash)
	if l > 0 {
		n += 1 + l + sovBlockHeaderMerkle(uint64(l))
	}
	return n
}

func sovBlockHeaderMerkle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockHeaderMerkle(x uint64) (n int) {
	return sovBlockHeaderMerkle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeaderMerkle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockHeaderMerkle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderMerkle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderMerkle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionChainidHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionChainidHash = append(m.VersionChainidHash[:0], dAtA[iNdEx:postIndex]...)
			if m.VersionChainidHash == nil {
				m.VersionChainidHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
			}
			m.TimeSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanosecond", wireType)
			}
			m.TimeNanosecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanosecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastblockidCommitHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastblockidCommitHash = append(m.LastblockidCommitHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastblockidCommitHash == nil {
				m.LastblockidCommitHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextvalidatorConsensusHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextvalidatorConsensusHash = append(m.NextvalidatorConsensusHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextvalidatorConsensusHash == nil {
				m.NextvalidatorConsensusHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastresultsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastresultsHash = append(m.LastresultsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastresultsHash == nil {
				m.LastresultsHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceProposerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceProposerHash = append(m.EvidenceProposerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EvidenceProposerHash == nil {
				m.EvidenceProposerHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockHeaderMerkle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeaderMerkleEvm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockHeaderMerkle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderMerkleEvm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderMerkleEvm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionChainidHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionChainidHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSecond", wireType)
			}
			m.TimeSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeNanosecond", wireType)
			}
			m.TimeNanosecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeNanosecond |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastblockidCommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastblockidCommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextvalidatorConsensusHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextvalidatorConsensusHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastresultsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastresultsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceProposerHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceProposerHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockHeaderMerkle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockHeaderMerkle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockHeaderMerkle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockHeaderMerkle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeaderMerkle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockHeaderMerkle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockHeaderMerkle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockHeaderMerkle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockHeaderMerkle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockHeaderMerkle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockHeaderMerkle = fmt.Errorf("proto: unexpected end of group")
)
