// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: luqchain/bridge/services.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryBlockheaderMerkleRequest is request type for the Query/QueryBlockheaderMerkleRequest RPC method.
type QueryBlockheaderMerkleRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockheaderMerkleRequest) Reset()         { *m = QueryBlockheaderMerkleRequest{} }
func (m *QueryBlockheaderMerkleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockheaderMerkleRequest) ProtoMessage()    {}
func (*QueryBlockheaderMerkleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{0}
}
func (m *QueryBlockheaderMerkleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockheaderMerkleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockheaderMerkleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockheaderMerkleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockheaderMerkleRequest.Merge(m, src)
}
func (m *QueryBlockheaderMerkleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockheaderMerkleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockheaderMerkleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockheaderMerkleRequest proto.InternalMessageInfo

func (m *QueryBlockheaderMerkleRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryBlockheaderMerkleResponse struct {
	BlockheaderMerkle BlockHeaderMerkle `protobuf:"bytes,1,opt,name=blockheaderMerkle,proto3" json:"blockheaderMerkle"`
}

func (m *QueryBlockheaderMerkleResponse) Reset()         { *m = QueryBlockheaderMerkleResponse{} }
func (m *QueryBlockheaderMerkleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockheaderMerkleResponse) ProtoMessage()    {}
func (*QueryBlockheaderMerkleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{1}
}
func (m *QueryBlockheaderMerkleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockheaderMerkleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockheaderMerkleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockheaderMerkleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockheaderMerkleResponse.Merge(m, src)
}
func (m *QueryBlockheaderMerkleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockheaderMerkleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockheaderMerkleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockheaderMerkleResponse proto.InternalMessageInfo

func (m *QueryBlockheaderMerkleResponse) GetBlockheaderMerkle() BlockHeaderMerkle {
	if m != nil {
		return m.BlockheaderMerkle
	}
	return BlockHeaderMerkle{}
}

type QueryMultistoreRequest struct {
	Height    int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Qid       string `protobuf:"bytes,2,opt,name=qid,proto3" json:"qid,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryMultistoreRequest) Reset()         { *m = QueryMultistoreRequest{} }
func (m *QueryMultistoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMultistoreRequest) ProtoMessage()    {}
func (*QueryMultistoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{2}
}
func (m *QueryMultistoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultistoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultistoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultistoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultistoreRequest.Merge(m, src)
}
func (m *QueryMultistoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultistoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultistoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultistoreRequest proto.InternalMessageInfo

func (m *QueryMultistoreRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryMultistoreRequest) GetQid() string {
	if m != nil {
		return m.Qid
	}
	return ""
}

func (m *QueryMultistoreRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryMultistoreResponse struct {
	MultiStoreTree MultiStoreTreeFields `protobuf:"bytes,1,opt,name=MultiStoreTree,proto3" json:"MultiStoreTree"`
	Iavl           []IAVLMerklePath     `protobuf:"bytes,2,rep,name=iavl,proto3" json:"iavl"`
	Version        uint64               `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Report         Report               `protobuf:"bytes,4,opt,name=report,proto3" json:"report"`
}

func (m *QueryMultistoreResponse) Reset()         { *m = QueryMultistoreResponse{} }
func (m *QueryMultistoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultistoreResponse) ProtoMessage()    {}
func (*QueryMultistoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{3}
}
func (m *QueryMultistoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultistoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultistoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultistoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultistoreResponse.Merge(m, src)
}
func (m *QueryMultistoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultistoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultistoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultistoreResponse proto.InternalMessageInfo

func (m *QueryMultistoreResponse) GetMultiStoreTree() MultiStoreTreeFields {
	if m != nil {
		return m.MultiStoreTree
	}
	return MultiStoreTreeFields{}
}

func (m *QueryMultistoreResponse) GetIavl() []IAVLMerklePath {
	if m != nil {
		return m.Iavl
	}
	return nil
}

func (m *QueryMultistoreResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryMultistoreResponse) GetReport() Report {
	if m != nil {
		return m.Report
	}
	return Report{}
}

type QueryTmRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTmRequest) Reset()         { *m = QueryTmRequest{} }
func (m *QueryTmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTmRequest) ProtoMessage()    {}
func (*QueryTmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{4}
}
func (m *QueryTmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTmRequest.Merge(m, src)
}
func (m *QueryTmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTmRequest proto.InternalMessageInfo

func (m *QueryTmRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryTmResponse struct {
	TmSig  []TmSig               `protobuf:"bytes,1,rep,name=tmSig,proto3" json:"tmSig"`
	Common CommonEncodedVotePart `protobuf:"bytes,2,opt,name=common,proto3" json:"common"`
}

func (m *QueryTmResponse) Reset()         { *m = QueryTmResponse{} }
func (m *QueryTmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTmResponse) ProtoMessage()    {}
func (*QueryTmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{5}
}
func (m *QueryTmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTmResponse.Merge(m, src)
}
func (m *QueryTmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTmResponse proto.InternalMessageInfo

func (m *QueryTmResponse) GetTmSig() []TmSig {
	if m != nil {
		return m.TmSig
	}
	return nil
}

func (m *QueryTmResponse) GetCommon() CommonEncodedVotePart {
	if m != nil {
		return m.Common
	}
	return CommonEncodedVotePart{}
}

type QueryProofResponse struct {
	Height        int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Result        *Proof `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	EvmProofBytes string `protobuf:"bytes,3,opt,name=evmProofBytes,proto3" json:"evmProofBytes,omitempty"`
}

func (m *QueryProofResponse) Reset()         { *m = QueryProofResponse{} }
func (m *QueryProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofResponse) ProtoMessage()    {}
func (*QueryProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20ab372cf6c0d8e, []int{6}
}
func (m *QueryProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofResponse.Merge(m, src)
}
func (m *QueryProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofResponse proto.InternalMessageInfo

func (m *QueryProofResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryProofResponse) GetResult() *Proof {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryProofResponse) GetEvmProofBytes() string {
	if m != nil {
		return m.EvmProofBytes
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryBlockheaderMerkleRequest)(nil), "luqchain.bridge.QueryBlockheaderMerkleRequest")
	proto.RegisterType((*QueryBlockheaderMerkleResponse)(nil), "luqchain.bridge.QueryBlockheaderMerkleResponse")
	proto.RegisterType((*QueryMultistoreRequest)(nil), "luqchain.bridge.QueryMultistoreRequest")
	proto.RegisterType((*QueryMultistoreResponse)(nil), "luqchain.bridge.QueryMultistoreResponse")
	proto.RegisterType((*QueryTmRequest)(nil), "luqchain.bridge.QueryTmRequest")
	proto.RegisterType((*QueryTmResponse)(nil), "luqchain.bridge.QueryTmResponse")
	proto.RegisterType((*QueryProofResponse)(nil), "luqchain.bridge.QueryProofResponse")
}

func init() { proto.RegisterFile("luqchain/bridge/services.proto", fileDescriptor_b20ab372cf6c0d8e) }

var fileDescriptor_b20ab372cf6c0d8e = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0xd0, 0x52, 0xc3, 0x10, 0x41, 0x26, 0x5a, 0x36, 0x05, 0x96, 0x66, 0x41, 0xad, 0x1e,
	0xba, 0x49, 0x8d, 0x31, 0x1e, 0xad, 0x7f, 0xa2, 0x89, 0x24, 0xb8, 0x10, 0x0e, 0x5e, 0x70, 0xdb,
	0x3e, 0xb7, 0x23, 0xbb, 0x3b, 0xcb, 0xcc, 0xb4, 0x91, 0x2b, 0x27, 0x13, 0x2f, 0x26, 0x9e, 0xbc,
	0xf9, 0x71, 0x38, 0x92, 0x78, 0xf1, 0x64, 0x0c, 0xf8, 0x29, 0x3c, 0x99, 0x9d, 0x9d, 0x16, 0xd9,
	0x69, 0x81, 0xdb, 0xee, 0xbc, 0xdf, 0xfb, 0xfd, 0x99, 0x7d, 0xfb, 0xb0, 0x1d, 0xf6, 0xf7, 0x3b,
	0x3d, 0x9f, 0xc6, 0x6e, 0x9b, 0xd3, 0x6e, 0x00, 0xae, 0x00, 0x3e, 0xa0, 0x1d, 0x10, 0x8d, 0x84,
	0x33, 0xc9, 0xc8, 0xfc, 0xb0, 0xde, 0xc8, 0xea, 0xd5, 0x9b, 0x01, 0x0b, 0x98, 0xaa, 0xb9, 0xe9,
	0x53, 0x06, 0xab, 0x2e, 0x07, 0x8c, 0x05, 0x21, 0xb8, 0x7e, 0x42, 0x5d, 0x3f, 0x8e, 0x99, 0xf4,
	0x25, 0x65, 0xb1, 0x26, 0xa9, 0xde, 0xcb, 0x8b, 0xb4, 0x43, 0xd6, 0xd9, 0xdb, 0xed, 0x81, 0xdf,
	0x05, 0xbe, 0x1b, 0x01, 0xdf, 0x0b, 0x41, 0x43, 0x6b, 0x79, 0x68, 0xd4, 0x0f, 0x25, 0x15, 0x92,
	0xf1, 0x21, 0x62, 0x29, 0x8f, 0x90, 0x91, 0xa0, 0xc1, 0xa4, 0x76, 0x18, 0x44, 0xbb, 0x9d, 0x90,
	0x42, 0x2c, 0x33, 0x84, 0xf3, 0x08, 0xaf, 0xbc, 0xe9, 0x03, 0x3f, 0x68, 0xa5, 0x16, 0x32, 0x07,
	0x1b, 0xca, 0x80, 0x07, 0xfb, 0x7d, 0x10, 0x92, 0x54, 0x70, 0xb9, 0x07, 0x34, 0xe8, 0x49, 0x0b,
	0xd5, 0x50, 0xbd, 0xe8, 0xe9, 0x37, 0xe7, 0x23, 0xb6, 0x27, 0x35, 0x8a, 0x84, 0xc5, 0x02, 0xc8,
	0x0e, 0x5e, 0x68, 0xe7, 0x8b, 0x8a, 0x64, 0xb6, 0xe9, 0x34, 0x72, 0xf7, 0xd8, 0x50, 0x34, 0x2f,
	0xff, 0x43, 0xb6, 0x4a, 0x47, 0xbf, 0x56, 0x0b, 0x9e, 0x49, 0xe1, 0xbc, 0xc3, 0x15, 0xa5, 0xbc,
	0x31, 0xba, 0x8a, 0x4b, 0xbc, 0x92, 0x1b, 0xb8, 0xb8, 0x4f, 0xbb, 0xd6, 0x54, 0x0d, 0xd5, 0x67,
	0xbc, 0xf4, 0x91, 0x2c, 0xe3, 0x19, 0x49, 0x23, 0x10, 0xd2, 0x8f, 0x12, 0xab, 0x58, 0x43, 0xf5,
	0x92, 0x77, 0x76, 0xe0, 0xfc, 0x45, 0x78, 0xd1, 0x90, 0xd0, 0xa9, 0xb6, 0xf0, 0x9c, 0x3a, 0xdd,
	0x4a, 0x4f, 0xb7, 0x39, 0x0c, 0x23, 0xdd, 0x36, 0x22, 0x9d, 0x87, 0xbd, 0xa0, 0x10, 0x76, 0x85,
	0x4e, 0x95, 0xa3, 0x20, 0x8f, 0x71, 0x89, 0xfa, 0x83, 0xd0, 0x9a, 0xaa, 0x15, 0xeb, 0xb3, 0xcd,
	0x55, 0x83, 0xea, 0xd5, 0x93, 0x9d, 0xd7, 0x59, 0xfa, 0x4d, 0x5f, 0xf6, 0x34, 0x89, 0x6a, 0x21,
	0x16, 0xbe, 0x36, 0x00, 0x2e, 0x28, 0x8b, 0x75, 0x8e, 0xe1, 0x2b, 0x79, 0x88, 0xcb, 0x1c, 0x12,
	0xc6, 0xa5, 0x55, 0x52, 0x0e, 0x17, 0x0d, 0x5a, 0x4f, 0x95, 0x35, 0x9d, 0x06, 0x3b, 0x75, 0x3c,
	0xa7, 0xb2, 0x6f, 0x47, 0x97, 0x8d, 0xc0, 0x67, 0x84, 0xe7, 0x47, 0x50, 0x7d, 0x3d, 0x4d, 0x3c,
	0x2d, 0xa3, 0x2d, 0x1a, 0x58, 0x48, 0x45, 0xa9, 0x18, 0x9a, 0xdb, 0x69, 0x55, 0x4b, 0x66, 0x50,
	0xf2, 0x0c, 0x97, 0x3b, 0x2c, 0x8a, 0x58, 0xac, 0xbe, 0xd0, 0x6c, 0xf3, 0x8e, 0xd1, 0xf4, 0x54,
	0x95, 0x9f, 0xc7, 0x1d, 0xd6, 0x85, 0xee, 0x0e, 0x93, 0xb0, 0xe9, 0x9f, 0xf9, 0xce, 0x7a, 0x9d,
	0x43, 0x84, 0x89, 0x72, 0xb3, 0xc9, 0x19, 0x7b, 0x3f, 0x32, 0x34, 0x69, 0x26, 0x1a, 0xe9, 0xed,
	0x88, 0x7e, 0x28, 0xb5, 0xa8, 0xe9, 0x34, 0xe3, 0xd1, 0x28, 0xb2, 0x8e, 0xaf, 0xc3, 0x20, 0x52,
	0x67, 0xad, 0x03, 0x09, 0x42, 0xdd, 0xf6, 0x8c, 0x77, 0xfe, 0xb0, 0xf9, 0xad, 0x84, 0xcb, 0x2d,
	0xd5, 0x4e, 0xbe, 0x23, 0xbc, 0x60, 0xfc, 0x1c, 0xa4, 0x61, 0xc8, 0x5c, 0xf8, 0xfb, 0x55, 0xdd,
	0x2b, 0xe3, 0xb3, 0xbc, 0xce, 0xfd, 0xc3, 0x1f, 0x7f, 0xbe, 0x4e, 0xad, 0x13, 0xc7, 0x1d, 0xbb,
	0x65, 0xb2, 0x9e, 0x6c, 0xc7, 0x90, 0x4f, 0x48, 0x0f, 0xb3, 0x18, 0x4d, 0xe2, 0xdd, 0xf1, 0x7a,
	0xc6, 0xbf, 0x56, 0xad, 0x5f, 0x0e, 0xd4, 0x8e, 0xd6, 0x94, 0xa3, 0x15, 0xb2, 0xe4, 0x4e, 0x5e,
	0x66, 0xe4, 0x03, 0x9e, 0x56, 0x93, 0x41, 0x56, 0xc7, 0xf3, 0x8e, 0xa6, 0xb1, 0x5a, 0x9b, 0x0c,
	0xd0, 0x82, 0xb6, 0x12, 0xb4, 0x48, 0xc5, 0x1d, 0xbb, 0x1b, 0x49, 0x1f, 0x4f, 0xab, 0x4f, 0x76,
	0xf5, 0xb0, 0x6b, 0xe3, 0x81, 0xe7, 0x26, 0xed, 0x02, 0xd9, 0x44, 0x0d, 0x88, 0x7b, 0x74, 0x62,
	0xa3, 0xe3, 0x13, 0x1b, 0xfd, 0x3e, 0xb1, 0xd1, 0x97, 0x53, 0xbb, 0x70, 0x7c, 0x6a, 0x17, 0x7e,
	0x9e, 0xda, 0x85, 0xb7, 0xb7, 0x0c, 0x9f, 0x07, 0x09, 0x88, 0x76, 0x59, 0xad, 0xe8, 0x07, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xae, 0xa4, 0xaa, 0x95, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BridgeClient interface {
	BlockheaderMerkle(ctx context.Context, in *QueryBlockheaderMerkleRequest, opts ...grpc.CallOption) (*QueryBlockheaderMerkleResponse, error)
	MultistoreTree(ctx context.Context, in *QueryMultistoreRequest, opts ...grpc.CallOption) (*QueryMultistoreResponse, error)
	TmSig(ctx context.Context, in *QueryTmRequest, opts ...grpc.CallOption) (*QueryTmResponse, error)
	Proof(ctx context.Context, in *QueryMultistoreRequest, opts ...grpc.CallOption) (*QueryProofResponse, error)
}

type bridgeClient struct {
	cc grpc1.ClientConn
}

func NewBridgeClient(cc grpc1.ClientConn) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) BlockheaderMerkle(ctx context.Context, in *QueryBlockheaderMerkleRequest, opts ...grpc.CallOption) (*QueryBlockheaderMerkleResponse, error) {
	out := new(QueryBlockheaderMerkleResponse)
	err := c.cc.Invoke(ctx, "/luqchain.bridge.Bridge/BlockheaderMerkle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) MultistoreTree(ctx context.Context, in *QueryMultistoreRequest, opts ...grpc.CallOption) (*QueryMultistoreResponse, error) {
	out := new(QueryMultistoreResponse)
	err := c.cc.Invoke(ctx, "/luqchain.bridge.Bridge/MultistoreTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) TmSig(ctx context.Context, in *QueryTmRequest, opts ...grpc.CallOption) (*QueryTmResponse, error) {
	out := new(QueryTmResponse)
	err := c.cc.Invoke(ctx, "/luqchain.bridge.Bridge/TmSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) Proof(ctx context.Context, in *QueryMultistoreRequest, opts ...grpc.CallOption) (*QueryProofResponse, error) {
	out := new(QueryProofResponse)
	err := c.cc.Invoke(ctx, "/luqchain.bridge.Bridge/Proof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
type BridgeServer interface {
	BlockheaderMerkle(context.Context, *QueryBlockheaderMerkleRequest) (*QueryBlockheaderMerkleResponse, error)
	MultistoreTree(context.Context, *QueryMultistoreRequest) (*QueryMultistoreResponse, error)
	TmSig(context.Context, *QueryTmRequest) (*QueryTmResponse, error)
	Proof(context.Context, *QueryMultistoreRequest) (*QueryProofResponse, error)
}

// UnimplementedBridgeServer can be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (*UnimplementedBridgeServer) BlockheaderMerkle(ctx context.Context, req *QueryBlockheaderMerkleRequest) (*QueryBlockheaderMerkleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockheaderMerkle not implemented")
}
func (*UnimplementedBridgeServer) MultistoreTree(ctx context.Context, req *QueryMultistoreRequest) (*QueryMultistoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultistoreTree not implemented")
}
func (*UnimplementedBridgeServer) TmSig(ctx context.Context, req *QueryTmRequest) (*QueryTmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TmSig not implemented")
}
func (*UnimplementedBridgeServer) Proof(ctx context.Context, req *QueryMultistoreRequest) (*QueryProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proof not implemented")
}

func RegisterBridgeServer(s grpc1.Server, srv BridgeServer) {
	s.RegisterService(&_Bridge_serviceDesc, srv)
}

func _Bridge_BlockheaderMerkle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockheaderMerkleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).BlockheaderMerkle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luqchain.bridge.Bridge/BlockheaderMerkle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).BlockheaderMerkle(ctx, req.(*QueryBlockheaderMerkleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_MultistoreTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultistoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).MultistoreTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luqchain.bridge.Bridge/MultistoreTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).MultistoreTree(ctx, req.(*QueryMultistoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_TmSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).TmSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luqchain.bridge.Bridge/TmSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).TmSig(ctx, req.(*QueryTmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_Proof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultistoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).Proof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luqchain.bridge.Bridge/Proof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).Proof(ctx, req.(*QueryMultistoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bridge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luqchain.bridge.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockheaderMerkle",
			Handler:    _Bridge_BlockheaderMerkle_Handler,
		},
		{
			MethodName: "MultistoreTree",
			Handler:    _Bridge_MultistoreTree_Handler,
		},
		{
			MethodName: "TmSig",
			Handler:    _Bridge_TmSig_Handler,
		},
		{
			MethodName: "Proof",
			Handler:    _Bridge_Proof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "luqchain/bridge/services.proto",
}

func (m *QueryBlockheaderMerkleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockheaderMerkleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockheaderMerkleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockheaderMerkleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockheaderMerkleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockheaderMerkleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockheaderMerkle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMultistoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultistoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultistoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Qid) > 0 {
		i -= len(m.Qid)
		copy(dAtA[i:], m.Qid)
		i = encodeVarintServices(dAtA, i, uint64(len(m.Qid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultistoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultistoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultistoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Version != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Iavl) > 0 {
		for iNdEx := len(m.Iavl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Iavl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.MultiStoreTree.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TmSig) > 0 {
		for iNdEx := len(m.TmSig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TmSig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmProofBytes) > 0 {
		i -= len(m.EvmProofBytes)
		copy(dAtA[i:], m.EvmProofBytes)
		i = encodeVarintServices(dAtA, i, uint64(len(m.EvmProofBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintServices(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBlockheaderMerkleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServices(uint64(m.Height))
	}
	return n
}

func (m *QueryBlockheaderMerkleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockheaderMerkle.Size()
	n += 1 + l + sovServices(uint64(l))
	return n
}

func (m *QueryMultistoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServices(uint64(m.Height))
	}
	l = len(m.Qid)
	if l > 0 {
		n += 1 + l + sovServices(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovServices(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryMultistoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MultiStoreTree.Size()
	n += 1 + l + sovServices(uint64(l))
	if len(m.Iavl) > 0 {
		for _, e := range m.Iavl {
			l = e.Size()
			n += 1 + l + sovServices(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovServices(uint64(m.Version))
	}
	l = m.Report.Size()
	n += 1 + l + sovServices(uint64(l))
	return n
}

func (m *QueryTmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServices(uint64(m.Height))
	}
	return n
}

func (m *QueryTmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TmSig) > 0 {
		for _, e := range m.TmSig {
			l = e.Size()
			n += 1 + l + sovServices(uint64(l))
		}
	}
	l = m.Common.Size()
	n += 1 + l + sovServices(uint64(l))
	return n
}

func (m *QueryProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovServices(uint64(m.Height))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovServices(uint64(l))
	}
	l = len(m.EvmProofBytes)
	if l > 0 {
		n += 1 + l + sovServices(uint64(l))
	}
	return n
}

func sovServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServices(x uint64) (n int) {
	return sovServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBlockheaderMerkleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockheaderMerkleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockheaderMerkleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockheaderMerkleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockheaderMerkleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockheaderMerkleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockheaderMerkle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockheaderMerkle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultistoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultistoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultistoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultistoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultistoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultistoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiStoreTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultiStoreTree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iavl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iavl = append(m.Iavl, IAVLMerklePath{})
			if err := m.Iavl[len(m.Iavl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmSig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TmSig = append(m.TmSig, TmSig{})
			if err := m.TmSig[len(m.TmSig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Proof{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmProofBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmProofBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServices = fmt.Errorf("proto: unexpected end of group")
)
